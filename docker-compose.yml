services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data

  producer:
    build:
      context: .
      dockerfile: kafka_folder/Dockerfile
    container_name: producer
    depends_on:
      - kafka
    env_file:
      - .env
    environment:
      - KAFKA_BROKER_URL=kafka:9092
    volumes:
      - .:/app
    command: tail -f /dev/null

  spark-master:
    build:
      context: .
      dockerfile: spark_folder/Dockerfile
    container_name: spark-master
    hostname: spark-master
    env_file:
      - .env
    environment:
      - SPARK_MODE=master
    ports:
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
      - "${SPARK_MASTER_UI_PORT}:${SPARK_MASTER_UI_PORT}"
    volumes:
      - ./spark_folder:/app

  spark-worker:
    build:
      context: .
      dockerfile: spark_folder/Dockerfile
    container_name: spark-worker
    hostname: spark-worker
    depends_on:
      - spark-master
    env_file:
      - .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_PORT}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_EXECUTOR_MEMORY=${SPARK_EXECUTOR_MEMORY}
      - SPARK_EXECUTOR_CORES=${SPARK_EXECUTOR_CORES}
    ports:
      - "${SPARK_WORKER_UI_PORT}:${SPARK_WORKER_UI_PORT}"
    volumes:
      - ./spark_folder:/app

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - influxdb

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT}:${SPARK_MASTER_UI_PORT}"
    env_file:
      - .env
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_UI_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_PORT}
    depends_on:
      - kafka

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "${INFLUXDB_PORT}:${INFLUXDB_PORT}"
    volumes:
      - influxdb-storage:/var/lib/influxdb2
    env_file:
      - .env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}

networks:
  default:
    name: spark-network
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  grafana-storage:
  influxdb-storage:
